{
    "contents" : "\\name{Arlequin}\n\\alias{Arlequin}\n%- Also NEED an '\\alias' for EACH other topic documented here.\n\\title{Format from AFLPsim to Arlequin software format\n}\n\\description{\n%%  ~~ A concise (1-5 lines) description of what the function does. ~~\n}\n\\usage{\nArlequin(matriz, filename)\n}\n%- maybe also 'usage' for other objects documented here.\n\\arguments{\n  \\item{matriz}{\n%%     ~~Describe \\code{matriz} here~~\n}\n  \\item{filename}{\n%%     ~~Describe \\code{filename} here~~\n}\n}\n\\details{\n%%  ~~ If necessary, more details than the description above ~~\n}\n\\value{\n%%  ~Describe the value returned\n%%  If it is a LIST, use\n%%  \\item{comp1 }{Description of 'comp1'}\n%%  \\item{comp2 }{Description of 'comp2'}\n%% ...\n}\n\\references{\n%% ~put references to the literature/web site here ~\n}\n\\author{\n%%  ~~who you are~~\n}\n\\note{\n%%  ~~further notes~~\n}\n\n%% ~Make other sections like Warning with \\section{Warning }{....} ~\n\n\\seealso{\n%% ~~objects to See Also as \\code{\\link{help}}, ~~~\n}\n\\examples{\n##---- Should be DIRECTLY executable !! ----\n##-- ==>  Define data, use random,\n##--\tor do  help(data=index)  for the standard data sets.\n\n## The function is currently defined as\nfunction (matriz, filename) \n{\n    raw <- rbind(matriz$PA, matriz$PB, matriz$F1)\n    ind <- c(rownames(matriz$PA), rownames(matriz$PB), rownames(matriz$F1))\n    pop <- c(rep(\"PA\", nrow(matriz$PA)), rep(\"PB\", nrow(matriz$PB)), \n        rep(\"F1\", nrow(matriz$F1)))\n    col <- c(\"ind\", \"pop\", colnames(raw))\n    mat <- as.data.frame(cbind(ind, pop, raw))\n    colnames(mat) <- col\n    manb <- dim(mat)[2] - 2\n    innb <- dim(mat)[1]\n    mat <- mat[1:(innb), ]\n    mat <- mat[order(mat[, 2]), ]\n    pops <- as.vector(mat[, 2])\n    inds <- as.vector(mat[, 1])\n    matm <- as.matrix(mat[, (3:(manb + 2))])\n    popsizes <- table(pops)\n    npop <- length(popsizes)\n    popnames <- vector(mode = \"character\", npop)\n    n <- 0\n    cat(\"[Profile]\", \"\\n\", \"Title=\", \"\\\"\", \"AFLP data\", \"\\\"\", \n        \"\\n\", \"NbSamples=\", file = filename, sep = \"\")\n    cat(npop, \"\\n\", \"DataType=RFLP\", \"\\n\", \"GenotypicData=0\", \n        \"\\n\", \"LocusSeparator=NONE\", \"\\n\", \"MissingData='?'\", \n        \"\\n\", \"\\n\", file = filename, sep = \"\", append = TRUE)\n    cat(\"[Data]\", \"\\n\", \"[[Samples]]\", \"\\n\", \"\\n\", file = filename, \n        append = TRUE)\n    for (i in 1:npop) {\n        cat(\"SampleName=\", \"\\\"\", pops[n + 1], \"\\\"\", \"\\n\", file = filename, \n            sep = \"\", append = TRUE)\n        cat(\"SampleSize=\", popsizes[i], \"\\n\", file = filename, \n            append = TRUE)\n        cat(\"SampleData= {\", \"\\n\", file = filename, append = TRUE)\n        for (j in 1:popsizes[i]) {\n            cat(inds[n + j], \"\\t\", \"1\", \"\\t\", matm[(n + j), ], \n                \"\\n\", file = filename, append = TRUE)\n        }\n        cat(\"}\", \"\\n\", \"\\n\", file = filename, append = TRUE)\n        popnames[i] <- pops[n + 1]\n        n <- n + popsizes[i]\n    }\n    cat(\"[[Structure]]\", \"\\n\", \"\\n\", \"StructureName = \", \"\\\"\", \n        \"one group\", \"\\\"\", \"\\n\", \"NbGroups = 1\", \"\\n\", file = filename, \n        sep = \"\", append = TRUE)\n    cat(\"\\n\", \"Group ={\", \"\\n\", file = filename, sep = \"\", append = TRUE)\n    for (i in 1:npop) {\n        cat(\"\\\"\", popnames[i], \"\\\"\", \"\\n\", file = filename, append = TRUE, \n            sep = \"\")\n    }\n    cat(\"}\", \"\\n\", file = filename, append = TRUE)\n  }\n}\n% Add one or more standard keywords, see file 'KEYWORDS' in the\n% R documentation directory.\n\\keyword{ ~kwd1 }\n\\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line\n",
    "created" : 1363527677040.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4219128344",
    "id" : "8853FB48",
    "lastKnownWriteTime" : 1363527679,
    "path" : "/media/Datos/BiologÃ­a/github/AFLPsim/man/Arlequin.Rd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_doc"
}